// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :N/A

// Your code here along with comments explaining your approach in three sentences only
This is another problem I had completed a while ago, but from what I remember I was trying to do this method so that the search space would continue to decrease so that it becomes sorted if it isn't already. That way, it
would be easier to find the minimum within the search space.

class Solution:
    def findMin(self, nums: List[int]) -> int:
        left=0
        right = len(nums)-1
        mid=0
        while left<=right:
            mid = left + (right-left) //2
            if nums[left]>nums[right]:
                left+=1
            else:
                right-=1
        return nums[mid]
        
