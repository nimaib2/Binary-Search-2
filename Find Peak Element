// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :N/A

// Your code here along with comments explaining your approach in three sentences only
This was another binary search approach I did, but instead of checking if nums[mid] was equal to a certain element, I checked if it was greater than the surrounding elements. Since any peak element's index can be returned,
I just have to check that it is indeed a peak element. Since we are told to assume that elements outside the bounds of the list are negative infinity, we also have to check if nums[mid] is at either end of the list and that
it is either greater than nums[1] or nums[nums.length-2] (depending on where mid is). If neither condition is met, then we adjust by moving left to mid+1 if nums[mid]<nums[mid+1] since that is more likely to produce a peak 
element, as is moving right to mid-1 if nums[mid]<nums[mid-1].

class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length==1){
            return 0;
        }

        int left=0;
        int right=nums.length-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(mid>0 && mid<nums.length-1 && nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]){
                return mid;
            } else if((mid==0 && nums[mid]>nums[1]) || (mid==nums.length-1 && nums[mid]>nums[mid-1])){
                return mid;
            }
            
            if(nums[mid]<nums[mid+1]){
                left=mid+1;
            } else if(nums[mid]<nums[mid-1]){
                right=mid-1;
            }
        }
        return -1;
    }
}
        
